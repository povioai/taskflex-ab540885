diff --git a/lib/dialects/postgres.parser.js b/lib/dialects/postgres.parser.js
index ea43916099b76c7c9b3bf15d35741660ddf454bf..159581a33c8bcb8ccf2c037b9f00d9beda0ca186 100644
--- a/lib/dialects/postgres.parser.js
+++ b/lib/dialects/postgres.parser.js
@@ -4,7 +4,10 @@ import { BaseDatabaseParser } from './base-database.parser.js';
 const pgArrayAggToArray = (agg) => agg.replace(/{/g, '').replace(/}/g, '').split(',');
 const getColumnType = (dbType) => {
     switch (dbType) {
-        case 'uuid': return 'uuid';
+        case 'USER-DEFINED':
+          return 'mixed';
+        case 'uuid':
+          return 'uuid';
         case 'bigint':
         case 'int8':
         case 'bigserial':
@@ -52,16 +55,6 @@ const getColumnType = (dbType) => {
             return 'string';
     }
 };
-const getColumnInfo = (column) => ({
-    name: column.column_name,
-    isId: column.key_type === 'PRIMARY KEY',
-    position: column.ordinal_position,
-    defaultValue: column.column_default,
-    isNullable: column.is_nullable === 'YES',
-    isEditable: column.is_updatable === 'YES',
-    type: column.referenced_table ? 'reference' : getColumnType(column.data_type),
-    referencedTable: (column.referenced_table ?? null),
-});
 export class PostgresParser extends BaseDatabaseParser {
     static dialects = ['postgresql'];
     async parse() {
@@ -114,7 +107,7 @@ export class PostgresParser extends BaseDatabaseParser {
     async getProperties(table, schemaName) {
         const query = this.knex
             .from('information_schema.columns as col')
-            .select('col.column_name', 'col.ordinal_position', 'col.column_default', 'col.is_nullable', 'col.is_updatable', 'col.data_type', 'tco.constraint_type as key_type')
+            .select('col.column_name', 'col.ordinal_position', 'col.column_default', 'col.is_nullable', 'col.is_updatable', 'col.data_type', 'col.udt_name', 'tco.constraint_type as key_type')
             .leftJoin('information_schema.key_column_usage as kcu', (c) => c
             .on('kcu.column_name', 'col.column_name')
             .on('kcu.table_name', 'col.table_name'))
@@ -127,27 +120,52 @@ export class PostgresParser extends BaseDatabaseParser {
         const columns = await query;
         const relQuery = this.knex.raw(`
       select
-        (select r.relname from pg_class r where r.oid = c.conrelid) as table, 
-        (select array_agg(attname) from pg_attribute 
-        where attrelid = c.conrelid and ARRAY[attnum] <@ c.conkey) as col, 
+        (select r.relname from pg_class r where r.oid = c.conrelid) as table,
+        (select array_agg(attname) from pg_attribute
+        where attrelid = c.conrelid and ARRAY[attnum] <@ c.conkey) as col,
         (select r.relname from pg_class r where r.oid = c.confrelid) as referenced_table
       from pg_constraint c
       where c.conrelid = (select oid from pg_class where relname = '${table}')
       and (select r.relname from pg_class r where r.oid = c.confrelid) is not null
     `);
         const relations = await relQuery;
-        return columns.map((col) => {
-            const rel = relations.rows.find((r) => {
-                const cols = pgArrayAggToArray(r.col);
-                if (cols.length > 1)
-                    return null; // AdminJS doesn't support multiple foreign keys
-                return cols.find((c) => c === col.column_name);
-            });
-            if (rel) {
-                col.referenced_table = rel.referenced_table;
-            }
-            return new Property(getColumnInfo(col));
-        });
+        return Promise.all(columns.map(async (col) => {
+          const rel = relations.rows.find((r) => {
+            const cols = pgArrayAggToArray(r.col);
+            if (cols.length > 1)
+              return null; // AdminJS doesn't support multiple foreign keys
+            return cols.find((c) => c === col.column_name);
+          });
+          if (rel) {
+            col.referenced_table = rel.referenced_table;
+          }
+          return new Property(await this.getColumnInfo(col));
+        }));
+    }
+    async getColumnInfo(column) {
+      return {
+        name: column.column_name,
+        isId: column.key_type === 'PRIMARY KEY',
+        position: column.ordinal_position,
+        defaultValue: column.column_default,
+        isNullable: column.is_nullable === 'YES',
+        isEditable: column.is_updatable === 'YES',
+        type: column.referenced_table ? 'reference' : getColumnType(column.data_type),
+        referencedTable: (column.referenced_table ?? null),
+        availableValues: await this.getAvailableValues(column),
+      }
+    }
+    async getAvailableValues(column) {
+      if (column.data_type !== 'USER-DEFINED' || !column.udt_name) {
+        return null;
+      }
+      const query = this.knex
+        .from('pg_catalog.pg_enum as e')
+        .select('e.enumlabel')
+        .leftJoin('pg_catalog.pg_type as t', (c) => c.on('e.enumtypid', 't.oid'))
+        .where('t.typname', column.udt_name);
+      const labels = await query;
+      return labels.map((l) => l.enumlabel)
     }
 }
 //# sourceMappingURL=postgres.parser.js.map
